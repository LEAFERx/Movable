module Test{
    import 0x1.DiemTimestamp;
    import 0x1.DiemBlock;  
    import 0x1.Hash;
    import 0x1.Vector;

    public blockHash(seed:u64):u64{
        // Do some Hash function here
        return move(seed);
    }

    public theRun(blockInfo: vector<u8>):u64 {
        let salt:u64;
        let count:u64;
        let h:u64;
        let index:u8;
        let y:u64;
        let seed:u64;

        salt = DiemTimestamp.now_microseconds();
        count = 0;
        h = 0;
        y = 0;

        while(!Vector.is_empty<u8>(&blockInfo) && copy(count) < 8 ){
            index = Vector.pop_back<u8>(&mut blockInfo);
            h = move(h) + (copy(count) << move(index) );
            count = move(count) + 1;
        };
        y = copy(salt) * DiemBlock.get_current_block_height() / (copy(salt) % 5);
        seed = DiemBlock.get_current_block_height() / 3;
        seed = move(seed) + (move(salt) * 300);
        seed = move(seed) +  move(y);
        // Let h be the block hash of the number of seed last block, Do some hash here
        h = (move(seed) % 100) +1;
        return move(h);
    } 

}

